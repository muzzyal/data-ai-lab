name: Combined Terraform & Dataform CI/CD

on:
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
      - 'definitions/**'
      - '.github/workflows/ci.yml'

jobs:
  terraform-checks:
    name: Terraform Security & Format Checks
    if: contains(github.event.pull_request.changed_files, 'infra/') || contains(github.event.pull_request.changed_files, '.github/workflows/')
    runs-on: ubuntu-latest

    env:
      GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcp-key.json

    steps:
      - uses: actions/checkout@v4
      - name: Decode GCP service account key
        run: |
          echo "${{ secrets.GCP_SA_KEY }}" | base64 --decode > "${{ github.workspace }}/gcp-key.json"
          echo "GOOGLE_APPLICATION_CREDENTIALS=${{ github.workspace }}/gcp-key.json" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Format Check
        run: |
          cd infra
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd infra
          terraform init

      - name: Terraform Validate
        run: |
          cd infra
          terraform validate

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: infra

      - name: Terraform Plan
        run: |
          cd infra
          terraform plan -no-color

  dataform-checks:
    name: SQL Validation
    if: contains(github.event.pull_request.changed_files, 'definitions/')
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Fast fail for quick SQL checks

    steps:
      - uses: actions/checkout@v4

      - name: Basic SQL Validation
        run: |
          echo "Checking for common SQL issues..."
          cd definitions

          # Check 1: Validate SQL syntax (using sqlfluff for basic linting)
          if ! command -v sqlfluff &> /dev/null; then
            pip install sqlfluff
          fi

          # Basic linting (adjust dialect as needed)
          sqlfluff lint --dialect bigquery *.sqlx || echo "SQL issues detected"

          # Check 2: Verify no SELECT * in production code
          if grep -r "SELECT \*" --include="*.sql" .; then
            echo "::error::Found SELECT * statement - use explicit columns"
            exit 1
          fi

          # Check 3: Validate table references use project.dataset format
          if grep -r -E "FROM [a-zA-Z_]+" --include="*.sql" . | grep -v "FROM \`"; then
            echo "::error::Table references should use backticks or project.dataset notation"
            exit 1
          fi
